<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System"#>
using EtherSharp.ABI.Types;
using EtherSharp.ABI.Decode.Interfaces;
using System.Numerics;

namespace EtherSharp.ABI;
public partial class AbiDecoder
{
    public sbyte[] Int8Array()
    {
        var result = AbiTypes.SizedNumberArray<sbyte>.Decode(_bytes, _bytesRead);
        ConsumeBytes();
        return result;
    }
    sbyte[] IArrayAbiDecoder.Int8Array()
        => Int8Array();
    sbyte[] IDynamicTupleDecoder.Int8Array()
        => Int8Array();

    public byte[] UInt8Array()
    {
        var result = AbiTypes.SizedNumberArray<byte>.Decode(_bytes, _bytesRead);
        ConsumeBytes();
        return result;
    }
    byte[] IArrayAbiDecoder.UInt8Array()
        => UInt8Array();
    byte[] IDynamicTupleDecoder.UInt8Array()
        => UInt8Array();

    public short[] Int16Array()
    {
        var result = AbiTypes.SizedNumberArray<short>.Decode(_bytes, _bytesRead);
        ConsumeBytes();
        return result;
    }
    short[] IArrayAbiDecoder.Int16Array()
        => Int16Array();
    short[] IDynamicTupleDecoder.Int16Array()
        => Int16Array();

    public ushort[] UInt16Array()
    {
        var result = AbiTypes.SizedNumberArray<ushort>.Decode(_bytes, _bytesRead);
        ConsumeBytes();
        return result;
    }
    ushort[] IArrayAbiDecoder.UInt16Array()
        => UInt16Array();
    ushort[] IDynamicTupleDecoder.UInt16Array()
        => UInt16Array();

<#  for(var i = 24; i <= 32; i += 8) { #>
    public int[] Int<#=i#>Array()
    {
        var result = AbiTypes.SizedNumberArray<int>.Decode(_bytes, _bytesRead);
        ConsumeBytes();
        return result;
    }
    int[] IArrayAbiDecoder.Int<#=i#>Array()
        => Int<#=i#>Array();
    int[] IDynamicTupleDecoder.Int<#=i#>Array()
        => Int<#=i#>Array();

    public uint[] UInt<#=i#>Array()
    {
        var result = AbiTypes.SizedNumberArray<uint>.Decode(_bytes, _bytesRead);
        ConsumeBytes();
        return result;
    }
    uint[] IArrayAbiDecoder.UInt<#=i#>Array()
        => UInt<#=i#>Array();
    uint[] IDynamicTupleDecoder.UInt<#=i#>Array()
        => UInt<#=i#>Array();
<# } #>

<#  for(var i = 40; i <= 64; i += 8) { #>
    public long[] Int<#=i#>Array()
    {
        var result = AbiTypes.SizedNumberArray<long>.Decode(_bytes, _bytesRead);
        ConsumeBytes();
        return result;
    }
    long[] IArrayAbiDecoder.Int<#=i#>Array()
        => Int<#=i#>Array();
    long[] IDynamicTupleDecoder.Int<#=i#>Array()
        => Int<#=i#>Array();

    public ulong[] UInt<#=i#>Array()
    {
        var result = AbiTypes.SizedNumberArray<ulong>.Decode(_bytes, _bytesRead);
        ConsumeBytes();
        return result;
    }
    ulong[] IArrayAbiDecoder.UInt<#=i#>Array()
        => UInt<#=i#>Array();
    ulong[] IDynamicTupleDecoder.UInt<#=i#>Array()
        => UInt<#=i#>Array();
<# } #>

<#  for(var i = 72; i <= 256; i += 8) { #>
    public BigInteger[] Int<#=i#>Array()
    {
        var result = AbiTypes.BigIntegerArray.Decode(_bytes, _bytesRead, <#=i#>, false);
        ConsumeBytes();
        return result;
    }
    BigInteger[] IArrayAbiDecoder.Int<#=i#>Array()
        => Int<#=i#>Array();
    BigInteger[] IDynamicTupleDecoder.Int<#=i#>Array()
        => Int<#=i#>Array();

    public BigInteger[] UInt<#=i#>Array()
    {
        var result = AbiTypes.BigIntegerArray.Decode(_bytes, _bytesRead, <#=i#>, true);
        ConsumeBytes();
        return result;
    }
    BigInteger[] IArrayAbiDecoder.UInt<#=i#>Array()
        => UInt<#=i#>Array();
    BigInteger[] IDynamicTupleDecoder.UInt<#=i#>Array()
        => UInt<#=i#>Array();
<# } #>
}
