using EtherSharp.ABI.Fixed;
using EtherSharp.ABI.Decode.Interfaces;

namespace EtherSharp.ABI;
public partial class AbiDecoder
{
    public AbiDecoder Bytes1(out byte value)
    {
        value = FixedType.Byte.Decode(CurrentSlot);
        return this;
    }
    byte IFixedTupleDecoder.Bytes1()
    {
        _ = Bytes1(out byte value);
        return value;
    }
    byte IDynamicTupleDecoder.Bytes1()
    {
        _ = Bytes1(out byte value);
        return value;
    }
<#
    for(var i = 2; i <= 32;i=i+1)
    {
#>
    public AbiDecoder Bytes<#=i#>(out ReadOnlySpan<byte> value)
    {
        value = FixedType.Bytes.Decode(CurrentSlot, <#=i#>);
        return this;
    }
    ReadOnlySpan<byte> IFixedTupleDecoder.Bytes<#=i#>()
    {
        _ = Bytes<#=i#>(out var value);
        return value;
    }
    ReadOnlySpan<byte> IDynamicTupleDecoder.Bytes<#=i#>()
    {
        _ = Bytes<#=i#>(out var value);
        return value;
    }
<#
    }
#>
}