using EtherSharp.ABI.Types;
using EtherSharp.ABI.Decode.Interfaces;

namespace EtherSharp.ABI;
public partial class AbiDecoder
{
    public byte Bytes1()
    {
        var result = AbiTypes.Byte.Decode(CurrentSlot);
        ConsumeBytes();
        return result;
    }
    byte IFixedTupleDecoder.Bytes1()
        => Bytes1();
    byte IDynamicTupleDecoder.Bytes1()
        => Bytes1();

<#
    for(var i = 2; i <= 32; i++)
    {
#>
    public ReadOnlySpan<byte> Bytes<#=i#>()
    {
        var result = AbiTypes.SizedBytes.Decode(CurrentSlot, <#=i#>);
        ConsumeBytes();
        return result;
    }
    ReadOnlySpan<byte> IFixedTupleDecoder.Bytes<#=i#>()
        => Bytes<#=i#>();
    ReadOnlySpan<byte> IDynamicTupleDecoder.Bytes<#=i#>()
        => Bytes<#=i#>();
<#
    }
#>
}
