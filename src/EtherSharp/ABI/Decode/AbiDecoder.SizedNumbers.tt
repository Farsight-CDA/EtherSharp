<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
using EtherSharp.ABI.Fixed;
using EtherSharp.ABI.Decode.Interfaces;
using System.Numerics;

namespace EtherSharp.ABI;
public partial class AbiDecoder
{
    public AbiDecoder Int8(out sbyte value)
    {
        value = FixedType.SByte.Decode(CurrentSlot);
        return ConsumeBytes();
    }
    sbyte IFixedTupleDecoder.Int8() 
    {
        _ = Int8(out sbyte output);
        return output;
    }    
    sbyte IDynamicTupleDecoder.Int8() 
    {
        _ = Int8(out sbyte output);
        return output;
    }
    public AbiDecoder UInt8(out byte value)
    {
        value = FixedType.Byte.Decode(CurrentSlot);
        return ConsumeBytes();
    }
    byte IFixedTupleDecoder.UInt8() 
    {
        _ = UInt8(out byte output);
        return output;
    }
    byte IDynamicTupleDecoder.UInt8() 
    {
        _ = UInt8(out byte output);
        return output;
    }

    public AbiDecoder Int16(out short value)
    {
        value = FixedType.Short.Decode(CurrentSlot);
        return ConsumeBytes();
    }
    short IFixedTupleDecoder.Int16() 
    {
        _ = Int16(out short output);
        return output;
    }
    short IDynamicTupleDecoder.Int16() 
    {
        _ = Int16(out short output);
        return output;
    }
    public AbiDecoder UInt16(out ushort value)
    {
        value = FixedType.UShort.Decode(CurrentSlot);
        return ConsumeBytes();
    }
    ushort IFixedTupleDecoder.UInt16() 
    {
        _ = UInt16(out ushort output);
        return output;
    }
    ushort IDynamicTupleDecoder.UInt16() 
    {
        _ = UInt16(out ushort output);
        return output;
    }
<#
    for(var i = 24; i <= 32;i=i+8)
    {
#>
    public AbiDecoder Int<#=i#>(out int value)
    {
        value = FixedType.Int.Decode(CurrentSlot);
        return ConsumeBytes();
    }
    int IFixedTupleDecoder.Int<#=i#>()
    {
        _ = Int<#=i#>(out int output);
        return output;
    }
    int IDynamicTupleDecoder.Int<#=i#>()
    {
        _ = Int<#=i#>(out int output);
        return output;
    }
    public AbiDecoder UInt<#=i#>(out uint value)
    {
        value = FixedType.UInt.Decode(CurrentSlot);
        return ConsumeBytes();
    }
    uint IFixedTupleDecoder.UInt<#=i#>()
    {
        _ = UInt<#=i#>(out uint output);
        return output;
    }
    uint IDynamicTupleDecoder.UInt<#=i#>()
    {
        _ = UInt<#=i#>(out uint output);
        return output;
    }
<#
    }
#>
<#
    for(var i = 40; i <= 64;i=i+8)
    {
#>
    public AbiDecoder Int<#=i#>(out long value)
    {
        value = FixedType.Long.Decode(CurrentSlot);
        return ConsumeBytes();
    }
    long IFixedTupleDecoder.Int<#=i#>()
    {
        _ = Int<#=i#>(out long output);
        return output;
    }
    long IDynamicTupleDecoder.Int<#=i#>()
    {
        _ = Int<#=i#>(out long output);
        return output;
    }
    public AbiDecoder UInt<#=i#>(out ulong value)
    {
        value = FixedType.ULong.Decode(CurrentSlot);
        return ConsumeBytes();
    }
    ulong IFixedTupleDecoder.UInt<#=i#>()
    {
        _ = UInt<#=i#>(out ulong output);
        return output;
    }
    ulong IDynamicTupleDecoder.UInt<#=i#>()
    {
        _ = UInt<#=i#>(out ulong output);
        return output;
    }
<#
    }
#>
<#
    for(var i = 72; i <= 256;i=i+8)
    {
#>
    public AbiDecoder Int<#=i#>(out BigInteger value)
    {
        value = FixedType.BigInteger.Decode(CurrentSlot, false);
        return ConsumeBytes();
    }
    BigInteger IFixedTupleDecoder.Int<#=i#>()
    {
        _ = Int<#=i#>(out var output);
        return output;
    }
    BigInteger IDynamicTupleDecoder.Int<#=i#>()
    {
        _ = Int<#=i#>(out var output);
        return output;
    }
    public AbiDecoder UInt<#=i#>(out BigInteger value)
    {
        value = FixedType.BigInteger.Decode(CurrentSlot, true);
        return ConsumeBytes();
    }
    BigInteger IFixedTupleDecoder.UInt<#=i#>()
    {
        _ = UInt<#=i#>(out var output);
        return output;
    }
    BigInteger IDynamicTupleDecoder.UInt<#=i#>()
    {
        _ = UInt<#=i#>(out var output);
        return output;
    }
<#
    }
#>
}