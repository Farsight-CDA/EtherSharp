<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
using EtherSharp.ABI.Types;
using EtherSharp.ABI.Decode.Interfaces;
using System.Numerics;

namespace EtherSharp.ABI;
public partial class AbiDecoder
{
    public sbyte Int8()
    {
        var result = AbiTypes.SByte.Decode(CurrentSlot);
        ConsumeBytes();
        return result;
    }
    sbyte IFixedTupleDecoder.Int8() 
        => Int8();
    sbyte IDynamicTupleDecoder.Int8() 
        => Int8();

    public byte UInt8()
    {
        var result = AbiTypes.Byte.Decode(CurrentSlot);
        ConsumeBytes();
        return result;
    }
    byte IFixedTupleDecoder.UInt8()     
        => UInt8();
    byte IDynamicTupleDecoder.UInt8() 
        => UInt8();

    public short Int16()
    {
        var result = AbiTypes.Short.Decode(CurrentSlot);
        ConsumeBytes();
        return result;
    }
    short IFixedTupleDecoder.Int16() 
        => Int16();
    short IDynamicTupleDecoder.Int16() 
        => Int16();

    public ushort UInt16()
    {
        var result = AbiTypes.UShort.Decode(CurrentSlot);
        ConsumeBytes();
        return result;
    }
    ushort IFixedTupleDecoder.UInt16()
        => UInt16();
    ushort IDynamicTupleDecoder.UInt16() 
        => UInt16();

<#
    for (var i = 24; i <= 32; i += 8) {
#>
    public int Int<#=i#>()
    {
        var result = AbiTypes.Int.Decode(CurrentSlot);
        ConsumeBytes();
        return result;
    }
    int IFixedTupleDecoder.Int<#=i#>() 
        => Int<#=i#>();
    int IDynamicTupleDecoder.Int<#=i#>() 
        => Int<#=i#>();

    public uint UInt<#=i#>()
    {
        var result = AbiTypes.UInt.Decode(CurrentSlot);
        ConsumeBytes();
        return result;
    }
    uint IFixedTupleDecoder.UInt<#=i#>() 
        => UInt<#=i#>();
    uint IDynamicTupleDecoder.UInt<#=i#>() 
        => UInt<#=i#>();
<#
    }
#>

<#
    for (var i = 40; i <= 64; i += 8) {
#>
    public long Int<#=i#>()
    {
        var result = AbiTypes.Long.Decode(CurrentSlot);
        ConsumeBytes();
        return result;
    }
    long IFixedTupleDecoder.Int<#=i#>() 
        => Int<#=i#>();
    long IDynamicTupleDecoder.Int<#=i#>() 
        => Int<#=i#>();

    public ulong UInt<#=i#>()
    {
        var result = AbiTypes.ULong.Decode(CurrentSlot);
        ConsumeBytes();
        return result;
    }
    ulong IFixedTupleDecoder.UInt<#=i#>() 
        => UInt<#=i#>();
    ulong IDynamicTupleDecoder.UInt<#=i#>() 
        => UInt<#=i#>();
<#
    }
#>

<#
    for (var i = 72; i <= 256; i += 8) {
#>
    public BigInteger Int<#=i#>()
    {
        var result = AbiTypes.BigInteger.Decode(CurrentSlot, false);
        ConsumeBytes();
        return result;
    }
    BigInteger IFixedTupleDecoder.Int<#=i#>() 
        => Int<#=i#>();
    BigInteger IDynamicTupleDecoder.Int<#=i#>() 
        => Int<#=i#>();

    public BigInteger UInt<#=i#>()
    {
        var result = AbiTypes.BigInteger.Decode(CurrentSlot, true);
        ConsumeBytes();
        return result;
    }
    BigInteger IFixedTupleDecoder.UInt<#=i#>() 
        => UInt<#=i#>();
    BigInteger IDynamicTupleDecoder.UInt<#=i#>() 
        => UInt<#=i#>();
<#
    }
#>
}
