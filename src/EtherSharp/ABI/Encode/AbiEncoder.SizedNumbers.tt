<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
using EtherSharp.ABI.Fixed;
using EtherSharp.ABI.Encode.Interfaces;
using System.Numerics;

namespace EtherSharp.ABI;
public partial class AbiEncoder
{
    public AbiEncoder UInt8(byte value)
        => AddElement(new FixedType<object>.Byte(value));
    IFixedTupleEncoder IFixedTupleEncoder.UInt8(byte value)
        => UInt8(value);    
    IDynamicTupleEncoder IDynamicTupleEncoder.UInt8(byte value)
        => UInt8(value);

    public AbiEncoder Int8(sbyte value)
        => AddElement(new FixedType<object>.SByte(value));
    IFixedTupleEncoder IFixedTupleEncoder.Int8(sbyte value)
        => Int8(value);
    IDynamicTupleEncoder IDynamicTupleEncoder.Int8(sbyte value)
        => Int8(value);

    public AbiEncoder UInt16(ushort value)
        => AddElement(new FixedType<object>.UShort(value));
    IFixedTupleEncoder IFixedTupleEncoder.UInt16(ushort value)
        => UInt16(value);
    IDynamicTupleEncoder IDynamicTupleEncoder.UInt16(ushort value)
        => UInt16(value);

    public AbiEncoder Int16(short value)
        => AddElement(new FixedType<object>.Short(value));
    IFixedTupleEncoder IFixedTupleEncoder.Int16(short value)
        => Int16(value);
    IDynamicTupleEncoder IDynamicTupleEncoder.Int16(short value)
        => Int16(value);

<#
    for(var i = 24; i <= 32;i=i+8)
    {
#>
    public AbiEncoder Int<#=i#>(int value)
        => AddElement(new FixedType<object>.Int(value, <#=i#>));
    IFixedTupleEncoder IFixedTupleEncoder.Int<#=i#>(int value)
        => Int<#=i#>(value);
    IDynamicTupleEncoder IDynamicTupleEncoder.Int<#=i#>(int value)
        => Int<#=i#>(value);

    public AbiEncoder UInt<#=i#>(uint value)
        => AddElement(new FixedType<object>.UInt(value, <#=i#>));
    IFixedTupleEncoder IFixedTupleEncoder.UInt<#=i#>(uint value)
        => UInt<#=i#>(value);
    IDynamicTupleEncoder IDynamicTupleEncoder.UInt<#=i#>(uint value)
        => UInt<#=i#>(value);
<#
    }
#>
<#
    for(var i = 40; i <= 64;i=i+8)
    {
#>
    public AbiEncoder Int<#=i#>(long value)
        => AddElement(new FixedType<object>.Long(value, <#=i#>));
    IFixedTupleEncoder IFixedTupleEncoder.Int<#=i#>(long value)
        => Int<#=i#>(value);
    IDynamicTupleEncoder IDynamicTupleEncoder.Int<#=i#>(long value)
        => Int<#=i#>(value);

    public AbiEncoder UInt<#=i#>(ulong value)
        => AddElement(new FixedType<object>.ULong(value, <#=i#>));
    IFixedTupleEncoder IFixedTupleEncoder.UInt<#=i#>(ulong value)
        => UInt<#=i#>(value);
    IDynamicTupleEncoder IDynamicTupleEncoder.UInt<#=i#>(ulong value)
        => UInt<#=i#>(value);
<#
    }
#>
<#
    for(var i = 72; i <= 256;i=i+8)
    {
#>
    public AbiEncoder Int<#=i#>(BigInteger value)
        => AddElement(new FixedType<object>.BigInteger(value, false, <#=i#>));
    IFixedTupleEncoder IFixedTupleEncoder.Int<#=i#>(BigInteger value)
        => Int<#=i#>(value);
    IDynamicTupleEncoder IDynamicTupleEncoder.Int<#=i#>(BigInteger value)
        => Int<#=i#>(value);

    public AbiEncoder UInt<#=i#>(BigInteger value)
        => AddElement(new FixedType<object>.BigInteger(value, true, <#=i#>));
    IFixedTupleEncoder IFixedTupleEncoder.UInt<#=i#>(BigInteger value)
        => UInt<#=i#>(value);
    IDynamicTupleEncoder IDynamicTupleEncoder.UInt<#=i#>(BigInteger value)
        => UInt<#=i#>(value);
<#
    }
#>
}