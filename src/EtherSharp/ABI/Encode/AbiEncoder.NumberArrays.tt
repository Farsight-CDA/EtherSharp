<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
using EtherSharp.ABI.Dynamic;
using EtherSharp.ABI.Encode.Interfaces;
using System.Numerics;

namespace EtherSharp.ABI;
public partial class AbiEncoder
{
<#
    for(var i = 24; i <= 32;i=i+8)
    {
#>
    public AbiEncoder Int<#=i#>Array(params int[] value)
        => AddElement(new DynamicType<object>.PrimitiveNumberArray<int>(value, <#=i#>));
    IArrayAbiEncoder IArrayAbiEncoder.Int<#=i#>Array(params int[] value)
        => Int<#=i#>Array(value);
    IStructAbiEncoder IStructAbiEncoder.Int<#=i#>Array(params int[] value)
        => Int<#=i#>Array(value);

    public AbiEncoder UInt<#=i#>Array(params uint[] value)
        => AddElement(new DynamicType<object>.PrimitiveNumberArray<uint>(value, <#=i#>));
    IArrayAbiEncoder IArrayAbiEncoder.UInt<#=i#>Array(params uint[] value)
        => UInt<#=i#>Array(value);
    IStructAbiEncoder IStructAbiEncoder.UInt<#=i#>Array(params uint[] value)
        => UInt<#=i#>Array(value);
<#
    }
#>
<#
    for(var i = 40; i <= 64;i=i+8)
    {
#>
    public AbiEncoder Int<#=i#>Array(params long[] value)
        => AddElement(new DynamicType<object>.PrimitiveNumberArray<long>(value, <#=i#>));
    IArrayAbiEncoder IArrayAbiEncoder.Int<#=i#>Array(params long[] value)
        => Int<#=i#>Array(value);
    IStructAbiEncoder IStructAbiEncoder.Int<#=i#>Array(params long[] value)
        => Int<#=i#>Array(value);

    public AbiEncoder UInt<#=i#>Array(params ulong[] value)
        => AddElement(new DynamicType<object>.PrimitiveNumberArray<ulong>(value, <#=i#>));
    IArrayAbiEncoder IArrayAbiEncoder.UInt<#=i#>Array(params ulong[] value)
        => UInt<#=i#>Array(value);
    IStructAbiEncoder IStructAbiEncoder.UInt<#=i#>Array(params ulong[] value)
        => UInt<#=i#>Array(value);
<#
    }
#>
<#
    for(var i = 72; i <= 256;i=i+8)
    {
#>
    public AbiEncoder Int<#=i#>Array(params BigInteger[] value)
        => AddElement(new DynamicType<object>.BigIntegerArray(value, false, <#=i#>));
    IArrayAbiEncoder IArrayAbiEncoder.Int<#=i#>Array(params BigInteger[] value)
        => Int<#=i#>Array(value);
    IStructAbiEncoder IStructAbiEncoder.Int<#=i#>Array(params BigInteger[] value)
        => Int<#=i#>Array(value);

    public AbiEncoder UInt<#=i#>Array(params BigInteger[] value)
        => AddElement(new DynamicType<object>.BigIntegerArray(value, true, <#=i#>));
    IArrayAbiEncoder IArrayAbiEncoder.UInt<#=i#>Array(params BigInteger[] value)
        => UInt<#=i#>Array(value);
    IStructAbiEncoder IStructAbiEncoder.UInt<#=i#>Array(params BigInteger[] value)
        => UInt<#=i#>Array(value);
<#
    }
#>
}